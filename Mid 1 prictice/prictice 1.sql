-- SUTABDI'S PROBLEM
--STUDENT TABLE
CREATE TABLE STUDENT_TABLE(STUDENT_ID VARCHAR2(4),STUDENT_NAME VARCHAR2(30));

INSERT INTO STUDENT_TABLE VALUES ('7007','JAMES BOND');
INSERT INTO STUDENT_TABLE VALUES ('1313','SUSAN BROWH');
INSERT INTO STUDENT_TABLE VALUES ('5050','SUSAN SMITH');
INSERT INTO STUDENT_TABLE VALUES ('8989','MAGAN BLACK');
--MODIFY THE PRIMARY KEY

ALTER TABLE STUDENT_TABLE ADD CONSTRAINT STUDENT_PK PRIMARY KEY (STUDENT_ID);

--COURSE TABLE 
CREATE TABLE COURSE_TABLE(COURSE_ID VARCHAR2(7), COUR_NAME VARCHAR2(30), NOOFPTS NUMBER);

INSERT INTO COURSE_TABLE VALUES ('COMP302','DATA SYSTEMS',15);
INSERT INTO COURSE_TABLE VALUES ('COMP203','COMPUTER ORGANIZATION',22);
INSERT INTO COURSE_TABLE VALUES ('COMP206','PROGRAM AND DATA STRUCTURES',22);
INSERT INTO COURSE_TABLE VALUES ('COMP442','ISSUES IN DATABASE',15);

ALTER TABLE COURSE_TABLE ADD CONSTRAINT COURSE_PK PRIMARY KEY (COURSE_ID);
--ENROLLED_TABLE
CREATE TABLE ENROLLED_TABLE ( STUDENT_ID VARCHAR2(4),COURSE_ID VARCHAR2(7), GRADE VARCHAR2(2),
CONSTRAINT STUDENT_FK FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT_TABLE,
CONSTRAINT COURSE_FK FOREIGN KEY (COURSE_ID) REFERENCES COURSE_TABLE);

INSERT INTO ENROLLED_TABLE VALUES ('7007','COMP203','A+');
INSERT INTO ENROLLED_TABLE VALUES ('7007','COMP206','A+');
INSERT INTO ENROLLED_TABLE VALUES ('7007','COMP302','A+');
INSERT INTO ENROLLED_TABLE VALUES ('7007','COMP442',NULL);
INSERT INTO ENROLLED_TABLE VALUES ('1313','COMP203','A');
INSERT INTO ENROLLED_TABLE VALUES ('1313','COMP302','B+');
INSERT INTO ENROLLED_TABLE VALUES ('5050','COMP203','C+');
INSERT INTO ENROLLED_TABLE VALUES ('1313','COMP442',NULL);

-- WRITE A RELATIONAL ALGREBRAIC EXPRESSION THAT WILL RETURN THE STUDENT NAMES ALONG WITH THE COURSE NAME WHICH THEY HAVE ENROLLED.
SELECT STUDENT_NAME,COUR_NAME
FROM STUDENT_TABLE NATURAL JOIN ENROLLED_TABLE NATURAL JOIN COURSE_TABLE;

--write a sql query that returns the name of the course which is not enrolled by any students.

SELECT COUR_NAME
FROM STUDENT_TABLE, COURSE_TABLE, ENROLLED_TABLE WHERE STUDENT_TABLE.STUDENT_ID = ENROLLED_TABLE.STUDENT_ID  AND COURSE_TABLE.COURSE_ID = ENROLLED_TABLE.COURSE_ID
 MINUS
SELECT COUR_NAME
FROM STUDENT_TABLE COURSE_TABLE, ENROLLED_TABLE NATURAL JOIN STUDENT_TABLE WHERE COURSE_TABLE.COURSE_ID = ENROLLED_TABLE.COURSE_ID;



-- ANOTHER CODE:

 SELECT COUR_NAME
 FROM COURSE_TABLE MINUS
 SELECT COUR_NAME
 FROM COURSE_TABLE NATURAL JOIN ENROLLED_TABLE;

--write a swl query that counts the number of students whose grade is NULL;

SELECT COUNT(*)-COUNT(GRADE) AS NULL_VALUE FROM ENROLLED_TABLE;

--delete all table 
DROP TABLE ENROLLED_TABLE;
DROP TABLE STUDENT_TABLE;
DROP TABLE COURSE_TABLE;


select  sum(balance*.20) as updated_balance, sum(balance + balance*.20)    from account
    group by branch_name;




select sum(account.blance * branch.assets)
from branch natural join account
group by branch_name;

create table card_table(unit number, price number, courntry varchar2(10));

INSERT into card_table VALUES(2,20,'DHAKA');
INSERT into card_table VALUES(3,10,'CHITAGAN');
INSERT into card_table VALUES(6,50,'JOSOR');
INSERT into card_table VALUES(8,820,'KHOLNA');
INSERT into card_table VALUES(6,90,'JOSOR');
INSERT into card_table VALUES(8,520,'KHOLNA');
INSERT into card_table VALUES(3,10,'CHITAGAN');
SELECT SUM(UNIT*PRICE)
FROM card_table;

SELECT courntry, SUM(UNIT*PRICE) AS TOTAL_AMOUNT
FROM card_table
GROUP BY courntry;


create table card_table2( price number,unit number, courntry varchar2(10));

INSERT into card_table2 VALUES(2,20,'DHAKA');
INSERT into card_table2 VALUES(3,10,'CHITAGAN');
INSERT into card_table2 VALUES(6,50,'JOSOR');
INSERT into card_table2 VALUES(8,820,'KHOLNA');
INSERT into card_table2 VALUES(6,90,'JOSOR');
INSERT into card_table2 VALUES(8,520,'KHOLNA');
INSERT into card_table2 VALUES(3,10,'CHITAGAN');

SELECT courntry, SUM(UNIT*PRICE) AS TOTAL_AMOUNT
FROM card_table, card_table2
GROUP BY courntry;